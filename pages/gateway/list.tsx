
import { useEffect, useState } from 'react';
import Head from 'next/head';
import styles from './list.module.css';
import SimpleLayout from '../../src/components/layouts/SimpleLayout';
import { Table, Button, ButtonGroup } from 'react-bootstrap';
import { useRouter } from 'next/router';
// import { GetStaticProps, GetServerSideProps } from 'next';
import { Gateway, Peripheral } from '.prisma/client';
// import { useQuery } from 'react-query';
// import { useSession } from "next-auth/client";
import { BsPlus, BsTrash, BsEye } from 'react-icons/bs';
import Confirmation from '@/components/modals/Confirmation';

const fetchGateways = async () => {
  let rul = `/api/gateway`;
  let q = await fetch(rul);
  return q.json();
};
type GatewayWithPeripheral = Gateway & {
  peripherals: Peripheral[];
};


export default function List() {
  const router = useRouter();
  const [gateways, setGateways] = useState<GatewayWithPeripheral[]>([]);
  const [showConfirmationModal, setShowConfirmationModal] = useState(false);
  const [gatewayToDelete, setGatewayToDelete] = useState<GatewayWithPeripheral>();

  useEffect(() => {
    const getGateways = async () => {
      let res = await fetchGateways();
      if (res.ok) {
        setGateways(res.gateways);
      }
    }
    getGateways();
  },[]);
  
  const addGateway = () => {
    router.push('/gateway/create');
  };

  const addPeripheral = (gatewayId: number) => {
    router.push(`/peripheral/create/${gatewayId}`);
  };

  const gatewayDetail = (id: number) => {
    router.push(`/gateway/${id}`);
  };

  const gatewayDelete = async (id: number) => {
    
      let q = await fetch(`/api/gateway?id=${id}`, {
        method: 'DELETE',       
      });
  
    let res = await q.json(); console.log(res);
      if (res.ok) {
        const gs = gateways.filter((g) => g.id !== res.transaction[1].id);
        setGateways(gs);
      }
      else if(res.error) {alert(res.error)}
  };

  return (
    
    <SimpleLayout title="Gateways">
        <div className={styles.container}>
      <Head>
        <title>Gateways</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        </Head>
        {gatewayToDelete && <Confirmation
          show={showConfirmationModal}
          onCancel={() => {
            setShowConfirmationModal(false);
            setGatewayToDelete(undefined);
          }}
          onAccept={() => {
            gatewayDelete(gatewayToDelete.id);
            setShowConfirmationModal(false);
          }}
        >
          <p>Will be deleted the Gateway with {gatewayToDelete!.peripherals.length} peripherals, do you want to continue?</p>
        </Confirmation>}
        { /* session && */ <Button variant="success" onClick={ addGateway}><BsPlus/> Gateway</Button>}
      <Table striped bordered hover>
  <thead>
    <tr>
      <th>Serial No.</th>
      <th>Name</th>
              <th>IPV4</th>
              <th>Actions</th>
    </tr>
  </thead>
  <tbody>
            {gateways && gateways.map(
              (g) => <tr key={g.id}>
                <td>{g.serial}</td>
                <td>{g.name}</td>
                <td>{g.ipv4}</td> 
                <td><ButtonGroup size="sm">
                  <Button title="Detail" onClick={ () => gatewayDetail(g.id)}><BsEye />{' '}{ g.peripherals.length} peripherals</Button>
                  {/* session && */ <>
                    {g.peripherals.length < 10 && <Button title="Add Peripherals" variant="success" onClick={ () => addPeripheral(g.id)}><BsPlus/> Peripheral</Button>}  
                    <Button title="Delete" variant="warning" onClick={() => {
                    setShowConfirmationModal(true);
                    setGatewayToDelete(g);
                  }}><BsTrash /> Gateway</Button>
                  
                  </>}
                  {/* {session && }
    
                  { session && g.peripherals.length < 10 && <Button title="Add Peripherals" variant="success" onClick={ () => addPeripheral(g.id)}><BsPlus/></Button>} */}
  </ButtonGroup></td>
              </tr>

            )}
  </tbody>
</Table>
      

     
    </div>
  
    </SimpleLayout>
    )
}

/* 

export const getServerSideProps: GetServerSideProps = async () => {
  // const queryClient = new QueryClient();
  // await queryClient.prefetchQuery('WORKS', getWorks);
  const gateways = await prisma.gateway.findMany({
    select: {
      id: true,
      serial: true,
      name: true,
      ipv4: true,
    },
    where: {
      creator: {
        id: 1//session?.user?.id,
      },
      
   }
  });
  
  return {
    props: {
      gateways,
      // dehydratedState: dehydrate(queryClient),
    },
  };
};
 */
