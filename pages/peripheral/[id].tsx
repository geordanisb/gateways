
import { useState, useEffect } from 'react';
import Link from 'next/link';
import Head from 'next/head'
import Image from 'next/image'
import styles from './list.module.css'
import SimpleLayout from '../../src/components/layouts/SimpleLayout';
import { Table, Button, ButtonGroup } from 'react-bootstrap';
import { useRouter } from 'next/router';
import { GetStaticProps, GetServerSideProps } from 'next';
import { Peripheral } from '.prisma/client';
import {prisma} from '@/lib/prisma';
import { useQuery } from 'react-query';
import { BsPlus,BsTrash, BsEye, BsCollection} from 'react-icons/bs'

const fetchPeripheral = async (id: number) => {
  if (id) {
    
    let rul = `/api/peripheral?id=${id}`;
    let q = await fetch(rul);
    const res = await q.json();
    return res;
  }
  return null;
};

export default function Detail() {

  const router = useRouter();
  
  const [peripheral, setPeripheral] = useState<Peripheral>();
  
  useEffect(() => {
    const getPeripheral = async () => {
      let res = await fetchPeripheral(parseInt(router.query.id as string, 10));
      if (res && res.ok) {
        setPeripheral(res.peripheral);        
      }
    }
    getPeripheral();
  },[router.query.id]);
  
  const peripheralDelete = async (id: number) => {
    let q = await fetch(`/api/peripheral?id=${id}`, {
      method: 'DELETE',
    });
    let res = await q.json();
    if (res.ok) {
      router.push(`/gateway/${res.peripheral.gatewayId}`);
    }
    else if (res.error) {
      alert(res.error);
    }
  };
  
  
  return (
    <SimpleLayout title={`Peripheral ${ peripheral && peripheral.uid }`}>
        <div className={styles.container}>
      <Head>
          <title>Peripheral { peripheral && peripheral.uid }</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        </Head>
        {/* <Button variant="success" onClick={ addGateway}><BsPlus/></Button> */}
        {peripheral && <Table striped bordered hover>
          <thead>
            <tr>
              <th>UID</th>
              <th>Vendor</th>
              <th>Status</th>
              <th>Created At</th>
              <th>Gateway</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>{peripheral.uid}</td>
              <td>{peripheral.vendor}</td>
              <td className={peripheral.status ? `bg-success text-white` : `bg-danger text-white`}>{peripheral.status ? "Online" : "Offline"}</td>
              <td>{new Date(peripheral.createdAt).toUTCString()}</td>
              <td style={{cursor:"pointer"}}>
                <Link href={`/gateway/${peripheral.gatewayId}`}>
                  <a>{peripheral.gatewayId}</a>
                </Link>
              </td>
              <td><ButtonGroup size="sm">
                <Button title="Delete" onClick={() => peripheralDelete(peripheral.id)} variant="warning"><BsTrash /></Button>
              </ButtonGroup>
              </td>
            </tr>
          </tbody>
        </Table>
      
        }
     
    </div>
  
    </SimpleLayout>
    )
}

/* const getGateways = async () => {
  
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  // const queryClient = new QueryClient();
  // await queryClient.prefetchQuery('WORKS', getWorks);
  console.log(ctx);
  const { query } = ctx;
  const gateway = await prisma.gateway.findFirst({
    select: {
      serial: true,
      name: true,
      ipv4: true,
    },
    where: {
      id: parseInt(query.id as  string,10),     
   }
  });
  
  return {
    props: {
      gateway,
      // dehydratedState: dehydrate(queryClient),
    },
  };
};
 */
